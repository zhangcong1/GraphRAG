declare const _default: {
    nested: {
        milvus: {
            nested: {
                proto: {
                    nested: {
                        schema: {
                            options: {
                                go_package: string;
                                java_multiple_files: boolean;
                                java_package: string;
                                java_outer_classname: string;
                                java_generate_equals_and_hash: boolean;
                                csharp_namespace: string;
                            };
                            nested: {
                                DataType: {
                                    values: {
                                        None: number;
                                        Bool: number;
                                        Int8: number;
                                        Int16: number;
                                        Int32: number;
                                        Int64: number;
                                        Float: number;
                                        Double: number;
                                        String: number;
                                        VarChar: number;
                                        Array: number;
                                        JSON: number;
                                        Geometry: number;
                                        Text: number;
                                        BinaryVector: number;
                                        FloatVector: number;
                                        Float16Vector: number;
                                        BFloat16Vector: number;
                                        SparseFloatVector: number;
                                        Int8Vector: number;
                                        ArrayOfVector: number;
                                        ArrayOfStruct: number;
                                    };
                                };
                                FunctionType: {
                                    values: {
                                        Unknown: number;
                                        BM25: number;
                                        TextEmbedding: number;
                                        Rerank: number;
                                    };
                                };
                                FieldState: {
                                    values: {
                                        FieldCreated: number;
                                        FieldCreating: number;
                                        FieldDropping: number;
                                        FieldDropped: number;
                                    };
                                };
                                FieldSchema: {
                                    fields: {
                                        fieldID: {
                                            type: string;
                                            id: number;
                                        };
                                        name: {
                                            type: string;
                                            id: number;
                                        };
                                        isPrimaryKey: {
                                            type: string;
                                            id: number;
                                        };
                                        description: {
                                            type: string;
                                            id: number;
                                        };
                                        dataType: {
                                            type: string;
                                            id: number;
                                        };
                                        typeParams: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        indexParams: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        autoID: {
                                            type: string;
                                            id: number;
                                        };
                                        state: {
                                            type: string;
                                            id: number;
                                        };
                                        elementType: {
                                            type: string;
                                            id: number;
                                        };
                                        defaultValue: {
                                            type: string;
                                            id: number;
                                        };
                                        isDynamic: {
                                            type: string;
                                            id: number;
                                        };
                                        isPartitionKey: {
                                            type: string;
                                            id: number;
                                        };
                                        isClusteringKey: {
                                            type: string;
                                            id: number;
                                        };
                                        nullable: {
                                            type: string;
                                            id: number;
                                        };
                                        isFunctionOutput: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                FunctionSchema: {
                                    fields: {
                                        name: {
                                            type: string;
                                            id: number;
                                        };
                                        id: {
                                            type: string;
                                            id: number;
                                        };
                                        description: {
                                            type: string;
                                            id: number;
                                        };
                                        type: {
                                            type: string;
                                            id: number;
                                        };
                                        inputFieldNames: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        inputFieldIds: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        outputFieldNames: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        outputFieldIds: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        params: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                FunctionScore: {
                                    fields: {
                                        functions: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        params: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                CollectionSchema: {
                                    fields: {
                                        name: {
                                            type: string;
                                            id: number;
                                        };
                                        description: {
                                            type: string;
                                            id: number;
                                        };
                                        autoID: {
                                            type: string;
                                            id: number;
                                            options: {
                                                deprecated: boolean;
                                            };
                                        };
                                        fields: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        enableDynamicField: {
                                            type: string;
                                            id: number;
                                        };
                                        properties: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        functions: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        dbName: {
                                            type: string;
                                            id: number;
                                        };
                                        structArrayFields: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                StructArrayFieldSchema: {
                                    fields: {
                                        fieldID: {
                                            type: string;
                                            id: number;
                                        };
                                        name: {
                                            type: string;
                                            id: number;
                                        };
                                        description: {
                                            type: string;
                                            id: number;
                                        };
                                        fields: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                BoolArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                IntArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                LongArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                FloatArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                DoubleArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                BytesArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                StringArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ArrayArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        elementType: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                JSONArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                GeometryArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ValueField: {
                                    oneofs: {
                                        data: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        boolData: {
                                            type: string;
                                            id: number;
                                        };
                                        intData: {
                                            type: string;
                                            id: number;
                                        };
                                        longData: {
                                            type: string;
                                            id: number;
                                        };
                                        floatData: {
                                            type: string;
                                            id: number;
                                        };
                                        doubleData: {
                                            type: string;
                                            id: number;
                                        };
                                        stringData: {
                                            type: string;
                                            id: number;
                                        };
                                        bytesData: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ScalarField: {
                                    oneofs: {
                                        data: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        boolData: {
                                            type: string;
                                            id: number;
                                        };
                                        intData: {
                                            type: string;
                                            id: number;
                                        };
                                        longData: {
                                            type: string;
                                            id: number;
                                        };
                                        floatData: {
                                            type: string;
                                            id: number;
                                        };
                                        doubleData: {
                                            type: string;
                                            id: number;
                                        };
                                        stringData: {
                                            type: string;
                                            id: number;
                                        };
                                        bytesData: {
                                            type: string;
                                            id: number;
                                        };
                                        arrayData: {
                                            type: string;
                                            id: number;
                                        };
                                        jsonData: {
                                            type: string;
                                            id: number;
                                        };
                                        geometryData: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                SparseFloatArray: {
                                    fields: {
                                        contents: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        dim: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                VectorField: {
                                    oneofs: {
                                        data: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        dim: {
                                            type: string;
                                            id: number;
                                        };
                                        floatVector: {
                                            type: string;
                                            id: number;
                                        };
                                        binaryVector: {
                                            type: string;
                                            id: number;
                                        };
                                        float16Vector: {
                                            type: string;
                                            id: number;
                                        };
                                        bfloat16Vector: {
                                            type: string;
                                            id: number;
                                        };
                                        sparseFloatVector: {
                                            type: string;
                                            id: number;
                                        };
                                        int8Vector: {
                                            type: string;
                                            id: number;
                                        };
                                        vectorArray: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                VectorArray: {
                                    fields: {
                                        dim: {
                                            type: string;
                                            id: number;
                                        };
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        elementType: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                StructArrayField: {
                                    fields: {
                                        fields: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                FieldData: {
                                    oneofs: {
                                        field: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        type: {
                                            type: string;
                                            id: number;
                                        };
                                        fieldName: {
                                            type: string;
                                            id: number;
                                        };
                                        scalars: {
                                            type: string;
                                            id: number;
                                        };
                                        vectors: {
                                            type: string;
                                            id: number;
                                        };
                                        structArrays: {
                                            type: string;
                                            id: number;
                                        };
                                        fieldId: {
                                            type: string;
                                            id: number;
                                        };
                                        isDynamic: {
                                            type: string;
                                            id: number;
                                        };
                                        validData: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                IDs: {
                                    oneofs: {
                                        idField: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        intId: {
                                            type: string;
                                            id: number;
                                        };
                                        strId: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                SearchIteratorV2Results: {
                                    fields: {
                                        token: {
                                            type: string;
                                            id: number;
                                        };
                                        lastBound: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                SearchResultData: {
                                    oneofs: {
                                        _searchIteratorV2Results: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        numQueries: {
                                            type: string;
                                            id: number;
                                        };
                                        topK: {
                                            type: string;
                                            id: number;
                                        };
                                        fieldsData: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        scores: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        ids: {
                                            type: string;
                                            id: number;
                                        };
                                        topks: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        outputFields: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        groupByFieldValue: {
                                            type: string;
                                            id: number;
                                        };
                                        allSearchCount: {
                                            type: string;
                                            id: number;
                                        };
                                        distances: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        searchIteratorV2Results: {
                                            type: string;
                                            id: number;
                                            options: {
                                                proto3_optional: boolean;
                                            };
                                        };
                                        recalls: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        primaryFieldName: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                VectorClusteringInfo: {
                                    fields: {
                                        field: {
                                            type: string;
                                            id: number;
                                        };
                                        centroid: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ScalarClusteringInfo: {
                                    fields: {
                                        field: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ClusteringInfo: {
                                    fields: {
                                        vectorClusteringInfos: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        scalarClusteringInfos: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                TemplateValue: {
                                    oneofs: {
                                        val: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        boolVal: {
                                            type: string;
                                            id: number;
                                        };
                                        int64Val: {
                                            type: string;
                                            id: number;
                                        };
                                        floatVal: {
                                            type: string;
                                            id: number;
                                        };
                                        stringVal: {
                                            type: string;
                                            id: number;
                                        };
                                        arrayVal: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                TemplateArrayValue: {
                                    oneofs: {
                                        data: {
                                            oneof: string[];
                                        };
                                    };
                                    fields: {
                                        boolData: {
                                            type: string;
                                            id: number;
                                        };
                                        longData: {
                                            type: string;
                                            id: number;
                                        };
                                        doubleData: {
                                            type: string;
                                            id: number;
                                        };
                                        stringData: {
                                            type: string;
                                            id: number;
                                        };
                                        arrayData: {
                                            type: string;
                                            id: number;
                                        };
                                        jsonData: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                TemplateArrayValueArray: {
                                    fields: {
                                        data: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                            };
                        };
                        common: {
                            options: {
                                go_package: string;
                                java_multiple_files: boolean;
                                java_package: string;
                                java_outer_classname: string;
                                java_generate_equals_and_hash: boolean;
                                csharp_namespace: string;
                            };
                            nested: {
                                ErrorCode: {
                                    options: {
                                        deprecated: boolean;
                                    };
                                    values: {
                                        Success: number;
                                        UnexpectedError: number;
                                        ConnectFailed: number;
                                        PermissionDenied: number;
                                        CollectionNotExists: number;
                                        IllegalArgument: number;
                                        IllegalDimension: number;
                                        IllegalIndexType: number;
                                        IllegalCollectionName: number;
                                        IllegalTOPK: number;
                                        IllegalRowRecord: number;
                                        IllegalVectorID: number;
                                        IllegalSearchResult: number;
                                        FileNotFound: number;
                                        MetaFailed: number;
                                        CacheFailed: number;
                                        CannotCreateFolder: number;
                                        CannotCreateFile: number;
                                        CannotDeleteFolder: number;
                                        CannotDeleteFile: number;
                                        BuildIndexError: number;
                                        IllegalNLIST: number;
                                        IllegalMetricType: number;
                                        OutOfMemory: number;
                                        IndexNotExist: number;
                                        EmptyCollection: number;
                                        UpdateImportTaskFailure: number;
                                        CollectionNameNotFound: number;
                                        CreateCredentialFailure: number;
                                        UpdateCredentialFailure: number;
                                        DeleteCredentialFailure: number;
                                        GetCredentialFailure: number;
                                        ListCredUsersFailure: number;
                                        GetUserFailure: number;
                                        CreateRoleFailure: number;
                                        DropRoleFailure: number;
                                        OperateUserRoleFailure: number;
                                        SelectRoleFailure: number;
                                        SelectUserFailure: number;
                                        SelectResourceFailure: number;
                                        OperatePrivilegeFailure: number;
                                        SelectGrantFailure: number;
                                        RefreshPolicyInfoCacheFailure: number;
                                        ListPolicyFailure: number;
                                        NotShardLeader: number;
                                        NoReplicaAvailable: number;
                                        SegmentNotFound: number;
                                        ForceDeny: number;
                                        RateLimit: number;
                                        NodeIDNotMatch: number;
                                        UpsertAutoIDTrue: number;
                                        InsufficientMemoryToLoad: number;
                                        MemoryQuotaExhausted: number;
                                        DiskQuotaExhausted: number;
                                        TimeTickLongDelay: number;
                                        NotReadyServe: number;
                                        NotReadyCoordActivating: number;
                                        CreatePrivilegeGroupFailure: number;
                                        DropPrivilegeGroupFailure: number;
                                        ListPrivilegeGroupsFailure: number;
                                        OperatePrivilegeGroupFailure: number;
                                        SchemaMismatch: number;
                                        DataCoordNA: number;
                                        DDRequestRace: number;
                                    };
                                };
                                IndexState: {
                                    values: {
                                        IndexStateNone: number;
                                        Unissued: number;
                                        InProgress: number;
                                        Finished: number;
                                        Failed: number;
                                        Retry: number;
                                    };
                                };
                                SegmentState: {
                                    values: {
                                        SegmentStateNone: number;
                                        NotExist: number;
                                        Growing: number;
                                        Sealed: number;
                                        Flushed: number;
                                        Flushing: number;
                                        Dropped: number;
                                        Importing: number;
                                    };
                                };
                                SegmentLevel: {
                                    values: {
                                        Legacy: number;
                                        L0: number;
                                        L1: number;
                                        L2: number;
                                    };
                                };
                                Status: {
                                    fields: {
                                        errorCode: {
                                            type: string;
                                            id: number;
                                            options: {
                                                deprecated: boolean;
                                            };
                                        };
                                        reason: {
                                            type: string;
                                            id: number;
                                        };
                                        code: {
                                            type: string;
                                            id: number;
                                        };
                                        retriable: {
                                            type: string;
                                            id: number;
                                        };
                                        detail: {
                                            type: string;
                                            id: number;
                                        };
                                        extraInfo: {
                                            keyType: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                KeyValuePair: {
                                    fields: {
                                        key: {
                                            type: string;
                                            id: number;
                                        };
                                        value: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                KeyDataPair: {
                                    fields: {
                                        key: {
                                            type: string;
                                            id: number;
                                        };
                                        data: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                Blob: {
                                    fields: {
                                        value: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                PlaceholderType: {
                                    values: {
                                        None: number;
                                        BinaryVector: number;
                                        FloatVector: number;
                                        Float16Vector: number;
                                        BFloat16Vector: number;
                                        SparseFloatVector: number;
                                        Int8Vector: number;
                                        Int64: number;
                                        VarChar: number;
                                    };
                                };
                                PlaceholderValue: {
                                    fields: {
                                        tag: {
                                            type: string;
                                            id: number;
                                        };
                                        type: {
                                            type: string;
                                            id: number;
                                        };
                                        values: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                PlaceholderGroup: {
                                    fields: {
                                        placeholders: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                Address: {
                                    fields: {
                                        ip: {
                                            type: string;
                                            id: number;
                                        };
                                        port: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                MsgType: {
                                    values: {
                                        Undefined: number;
                                        CreateCollection: number;
                                        DropCollection: number;
                                        HasCollection: number;
                                        DescribeCollection: number;
                                        ShowCollections: number;
                                        GetSystemConfigs: number;
                                        LoadCollection: number;
                                        ReleaseCollection: number;
                                        CreateAlias: number;
                                        DropAlias: number;
                                        AlterAlias: number;
                                        AlterCollection: number;
                                        RenameCollection: number;
                                        DescribeAlias: number;
                                        ListAliases: number;
                                        AlterCollectionField: number;
                                        CreatePartition: number;
                                        DropPartition: number;
                                        HasPartition: number;
                                        DescribePartition: number;
                                        ShowPartitions: number;
                                        LoadPartitions: number;
                                        ReleasePartitions: number;
                                        ShowSegments: number;
                                        DescribeSegment: number;
                                        LoadSegments: number;
                                        ReleaseSegments: number;
                                        HandoffSegments: number;
                                        LoadBalanceSegments: number;
                                        DescribeSegments: number;
                                        FederListIndexedSegment: number;
                                        FederDescribeSegmentIndexData: number;
                                        CreateIndex: number;
                                        DescribeIndex: number;
                                        DropIndex: number;
                                        GetIndexStatistics: number;
                                        AlterIndex: number;
                                        Insert: number;
                                        Delete: number;
                                        Flush: number;
                                        ResendSegmentStats: number;
                                        Upsert: number;
                                        ManualFlush: number;
                                        FlushSegment: number;
                                        CreateSegment: number;
                                        Import: number;
                                        Search: number;
                                        SearchResult: number;
                                        GetIndexState: number;
                                        GetIndexBuildProgress: number;
                                        GetCollectionStatistics: number;
                                        GetPartitionStatistics: number;
                                        Retrieve: number;
                                        RetrieveResult: number;
                                        WatchDmChannels: number;
                                        RemoveDmChannels: number;
                                        WatchQueryChannels: number;
                                        RemoveQueryChannels: number;
                                        SealedSegmentsChangeInfo: number;
                                        WatchDeltaChannels: number;
                                        GetShardLeaders: number;
                                        GetReplicas: number;
                                        UnsubDmChannel: number;
                                        GetDistribution: number;
                                        SyncDistribution: number;
                                        RunAnalyzer: number;
                                        SegmentInfo: number;
                                        SystemInfo: number;
                                        GetRecoveryInfo: number;
                                        GetSegmentState: number;
                                        TimeTick: number;
                                        QueryNodeStats: number;
                                        LoadIndex: number;
                                        RequestID: number;
                                        RequestTSO: number;
                                        AllocateSegment: number;
                                        SegmentStatistics: number;
                                        SegmentFlushDone: number;
                                        DataNodeTt: number;
                                        Connect: number;
                                        ListClientInfos: number;
                                        AllocTimestamp: number;
                                        Replicate: number;
                                        CreateCredential: number;
                                        GetCredential: number;
                                        DeleteCredential: number;
                                        UpdateCredential: number;
                                        ListCredUsernames: number;
                                        CreateRole: number;
                                        DropRole: number;
                                        OperateUserRole: number;
                                        SelectRole: number;
                                        SelectUser: number;
                                        SelectResource: number;
                                        OperatePrivilege: number;
                                        SelectGrant: number;
                                        RefreshPolicyInfoCache: number;
                                        ListPolicy: number;
                                        CreatePrivilegeGroup: number;
                                        DropPrivilegeGroup: number;
                                        ListPrivilegeGroups: number;
                                        OperatePrivilegeGroup: number;
                                        OperatePrivilegeV2: number;
                                        CreateResourceGroup: number;
                                        DropResourceGroup: number;
                                        ListResourceGroups: number;
                                        DescribeResourceGroup: number;
                                        TransferNode: number;
                                        TransferReplica: number;
                                        UpdateResourceGroups: number;
                                        CreateDatabase: number;
                                        DropDatabase: number;
                                        ListDatabases: number;
                                        AlterDatabase: number;
                                        DescribeDatabase: number;
                                        AddCollectionField: number;
                                    };
                                };
                                MsgBase: {
                                    fields: {
                                        msgType: {
                                            type: string;
                                            id: number;
                                        };
                                        msgID: {
                                            type: string;
                                            id: number;
                                        };
                                        timestamp: {
                                            type: string;
                                            id: number;
                                        };
                                        sourceID: {
                                            type: string;
                                            id: number;
                                        };
                                        targetID: {
                                            type: string;
                                            id: number;
                                        };
                                        properties: {
                                            keyType: string;
                                            type: string;
                                            id: number;
                                        };
                                        replicateInfo: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ReplicateInfo: {
                                    fields: {
                                        isReplicate: {
                                            type: string;
                                            id: number;
                                        };
                                        msgTimestamp: {
                                            type: string;
                                            id: number;
                                        };
                                        replicateID: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                DslType: {
                                    values: {
                                        Dsl: number;
                                        BoolExprV1: number;
                                    };
                                };
                                MsgHeader: {
                                    fields: {
                                        base: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                DMLMsgHeader: {
                                    fields: {
                                        base: {
                                            type: string;
                                            id: number;
                                        };
                                        shardName: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                CompactionState: {
                                    values: {
                                        UndefiedState: number;
                                        Executing: number;
                                        Completed: number;
                                    };
                                };
                                ConsistencyLevel: {
                                    values: {
                                        Strong: number;
                                        Session: number;
                                        Bounded: number;
                                        Eventually: number;
                                        Customized: number;
                                    };
                                };
                                ImportState: {
                                    values: {
                                        ImportPending: number;
                                        ImportFailed: number;
                                        ImportStarted: number;
                                        ImportPersisted: number;
                                        ImportFlushed: number;
                                        ImportCompleted: number;
                                        ImportFailedAndCleaned: number;
                                    };
                                };
                                ObjectType: {
                                    values: {
                                        Collection: number;
                                        Global: number;
                                        User: number;
                                    };
                                };
                                ObjectPrivilege: {
                                    values: {
                                        PrivilegeAll: number;
                                        PrivilegeCreateCollection: number;
                                        PrivilegeDropCollection: number;
                                        PrivilegeDescribeCollection: number;
                                        PrivilegeShowCollections: number;
                                        PrivilegeLoad: number;
                                        PrivilegeRelease: number;
                                        PrivilegeCompaction: number;
                                        PrivilegeInsert: number;
                                        PrivilegeDelete: number;
                                        PrivilegeGetStatistics: number;
                                        PrivilegeCreateIndex: number;
                                        PrivilegeIndexDetail: number;
                                        PrivilegeDropIndex: number;
                                        PrivilegeSearch: number;
                                        PrivilegeFlush: number;
                                        PrivilegeQuery: number;
                                        PrivilegeLoadBalance: number;
                                        PrivilegeImport: number;
                                        PrivilegeCreateOwnership: number;
                                        PrivilegeUpdateUser: number;
                                        PrivilegeDropOwnership: number;
                                        PrivilegeSelectOwnership: number;
                                        PrivilegeManageOwnership: number;
                                        PrivilegeSelectUser: number;
                                        PrivilegeUpsert: number;
                                        PrivilegeCreateResourceGroup: number;
                                        PrivilegeDropResourceGroup: number;
                                        PrivilegeDescribeResourceGroup: number;
                                        PrivilegeListResourceGroups: number;
                                        PrivilegeTransferNode: number;
                                        PrivilegeTransferReplica: number;
                                        PrivilegeGetLoadingProgress: number;
                                        PrivilegeGetLoadState: number;
                                        PrivilegeRenameCollection: number;
                                        PrivilegeCreateDatabase: number;
                                        PrivilegeDropDatabase: number;
                                        PrivilegeListDatabases: number;
                                        PrivilegeFlushAll: number;
                                        PrivilegeCreatePartition: number;
                                        PrivilegeDropPartition: number;
                                        PrivilegeShowPartitions: number;
                                        PrivilegeHasPartition: number;
                                        PrivilegeGetFlushState: number;
                                        PrivilegeCreateAlias: number;
                                        PrivilegeDropAlias: number;
                                        PrivilegeDescribeAlias: number;
                                        PrivilegeListAliases: number;
                                        PrivilegeUpdateResourceGroups: number;
                                        PrivilegeAlterDatabase: number;
                                        PrivilegeDescribeDatabase: number;
                                        PrivilegeBackupRBAC: number;
                                        PrivilegeRestoreRBAC: number;
                                        PrivilegeGroupReadOnly: number;
                                        PrivilegeGroupReadWrite: number;
                                        PrivilegeGroupAdmin: number;
                                        PrivilegeCreatePrivilegeGroup: number;
                                        PrivilegeDropPrivilegeGroup: number;
                                        PrivilegeListPrivilegeGroups: number;
                                        PrivilegeOperatePrivilegeGroup: number;
                                        PrivilegeGroupClusterReadOnly: number;
                                        PrivilegeGroupClusterReadWrite: number;
                                        PrivilegeGroupClusterAdmin: number;
                                        PrivilegeGroupDatabaseReadOnly: number;
                                        PrivilegeGroupDatabaseReadWrite: number;
                                        PrivilegeGroupDatabaseAdmin: number;
                                        PrivilegeGroupCollectionReadOnly: number;
                                        PrivilegeGroupCollectionReadWrite: number;
                                        PrivilegeGroupCollectionAdmin: number;
                                        PrivilegeGetImportProgress: number;
                                        PrivilegeListImport: number;
                                        PrivilegeAddCollectionField: number;
                                    };
                                };
                                PrivilegeExt: {
                                    fields: {
                                        objectType: {
                                            type: string;
                                            id: number;
                                        };
                                        objectPrivilege: {
                                            type: string;
                                            id: number;
                                        };
                                        objectNameIndex: {
                                            type: string;
                                            id: number;
                                        };
                                        objectNameIndexs: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                privilegeExtObj: {
                                    type: string;
                                    id: number;
                                    extend: string;
                                };
                                StateCode: {
                                    values: {
                                        Initializing: number;
                                        Healthy: number;
                                        Abnormal: number;
                                        StandBy: number;
                                        Stopping: number;
                                    };
                                };
                                LoadState: {
                                    values: {
                                        LoadStateNotExist: number;
                                        LoadStateNotLoad: number;
                                        LoadStateLoading: number;
                                        LoadStateLoaded: number;
                                    };
                                };
                                SegmentStats: {
                                    fields: {
                                        SegmentID: {
                                            type: string;
                                            id: number;
                                        };
                                        NumRows: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ClientInfo: {
                                    fields: {
                                        sdkType: {
                                            type: string;
                                            id: number;
                                        };
                                        sdkVersion: {
                                            type: string;
                                            id: number;
                                        };
                                        localTime: {
                                            type: string;
                                            id: number;
                                        };
                                        user: {
                                            type: string;
                                            id: number;
                                        };
                                        host: {
                                            type: string;
                                            id: number;
                                        };
                                        reserved: {
                                            keyType: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ServerInfo: {
                                    fields: {
                                        buildTags: {
                                            type: string;
                                            id: number;
                                        };
                                        buildTime: {
                                            type: string;
                                            id: number;
                                        };
                                        gitCommit: {
                                            type: string;
                                            id: number;
                                        };
                                        goVersion: {
                                            type: string;
                                            id: number;
                                        };
                                        deployMode: {
                                            type: string;
                                            id: number;
                                        };
                                        reserved: {
                                            keyType: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                NodeInfo: {
                                    fields: {
                                        nodeId: {
                                            type: string;
                                            id: number;
                                        };
                                        address: {
                                            type: string;
                                            id: number;
                                        };
                                        hostname: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                LoadPriority: {
                                    values: {
                                        HIGH: number;
                                        LOW: number;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        google: {
            nested: {
                protobuf: {
                    nested: {
                        FileDescriptorSet: {
                            fields: {
                                file: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        FileDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                package: {
                                    type: string;
                                    id: number;
                                };
                                dependency: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                publicDependency: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                    options: {
                                        packed: boolean;
                                    };
                                };
                                weakDependency: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                    options: {
                                        packed: boolean;
                                    };
                                };
                                messageType: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                enumType: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                service: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                extension: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                                sourceCodeInfo: {
                                    type: string;
                                    id: number;
                                };
                                syntax: {
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        DescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                field: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                extension: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                nestedType: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                enumType: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                extensionRange: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                oneofDecl: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                                reservedRange: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                reservedName: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            nested: {
                                ExtensionRange: {
                                    fields: {
                                        start: {
                                            type: string;
                                            id: number;
                                        };
                                        end: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                                ReservedRange: {
                                    fields: {
                                        start: {
                                            type: string;
                                            id: number;
                                        };
                                        end: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                            };
                        };
                        FieldDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                number: {
                                    type: string;
                                    id: number;
                                };
                                label: {
                                    type: string;
                                    id: number;
                                };
                                type: {
                                    type: string;
                                    id: number;
                                };
                                typeName: {
                                    type: string;
                                    id: number;
                                };
                                extendee: {
                                    type: string;
                                    id: number;
                                };
                                defaultValue: {
                                    type: string;
                                    id: number;
                                };
                                oneofIndex: {
                                    type: string;
                                    id: number;
                                };
                                jsonName: {
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                            };
                            nested: {
                                Type: {
                                    values: {
                                        TYPE_DOUBLE: number;
                                        TYPE_FLOAT: number;
                                        TYPE_INT64: number;
                                        TYPE_UINT64: number;
                                        TYPE_INT32: number;
                                        TYPE_FIXED64: number;
                                        TYPE_FIXED32: number;
                                        TYPE_BOOL: number;
                                        TYPE_STRING: number;
                                        TYPE_GROUP: number;
                                        TYPE_MESSAGE: number;
                                        TYPE_BYTES: number;
                                        TYPE_UINT32: number;
                                        TYPE_ENUM: number;
                                        TYPE_SFIXED32: number;
                                        TYPE_SFIXED64: number;
                                        TYPE_SINT32: number;
                                        TYPE_SINT64: number;
                                    };
                                };
                                Label: {
                                    values: {
                                        LABEL_OPTIONAL: number;
                                        LABEL_REQUIRED: number;
                                        LABEL_REPEATED: number;
                                    };
                                };
                            };
                        };
                        OneofDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        EnumDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                value: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        EnumValueDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                number: {
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        ServiceDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                method: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        MethodDescriptorProto: {
                            fields: {
                                name: {
                                    type: string;
                                    id: number;
                                };
                                inputType: {
                                    type: string;
                                    id: number;
                                };
                                outputType: {
                                    type: string;
                                    id: number;
                                };
                                options: {
                                    type: string;
                                    id: number;
                                };
                                clientStreaming: {
                                    type: string;
                                    id: number;
                                };
                                serverStreaming: {
                                    type: string;
                                    id: number;
                                };
                            };
                        };
                        FileOptions: {
                            fields: {
                                javaPackage: {
                                    type: string;
                                    id: number;
                                };
                                javaOuterClassname: {
                                    type: string;
                                    id: number;
                                };
                                javaMultipleFiles: {
                                    type: string;
                                    id: number;
                                };
                                javaGenerateEqualsAndHash: {
                                    type: string;
                                    id: number;
                                    options: {
                                        deprecated: boolean;
                                    };
                                };
                                javaStringCheckUtf8: {
                                    type: string;
                                    id: number;
                                };
                                optimizeFor: {
                                    type: string;
                                    id: number;
                                    options: {
                                        default: string;
                                    };
                                };
                                goPackage: {
                                    type: string;
                                    id: number;
                                };
                                ccGenericServices: {
                                    type: string;
                                    id: number;
                                };
                                javaGenericServices: {
                                    type: string;
                                    id: number;
                                };
                                pyGenericServices: {
                                    type: string;
                                    id: number;
                                };
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                ccEnableArenas: {
                                    type: string;
                                    id: number;
                                };
                                objcClassPrefix: {
                                    type: string;
                                    id: number;
                                };
                                csharpNamespace: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                            reserved: number[][];
                            nested: {
                                OptimizeMode: {
                                    values: {
                                        SPEED: number;
                                        CODE_SIZE: number;
                                        LITE_RUNTIME: number;
                                    };
                                };
                            };
                        };
                        MessageOptions: {
                            fields: {
                                messageSetWireFormat: {
                                    type: string;
                                    id: number;
                                };
                                noStandardDescriptorAccessor: {
                                    type: string;
                                    id: number;
                                };
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                mapEntry: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                            reserved: number[][];
                        };
                        FieldOptions: {
                            fields: {
                                ctype: {
                                    type: string;
                                    id: number;
                                    options: {
                                        default: string;
                                    };
                                };
                                packed: {
                                    type: string;
                                    id: number;
                                };
                                jstype: {
                                    type: string;
                                    id: number;
                                    options: {
                                        default: string;
                                    };
                                };
                                lazy: {
                                    type: string;
                                    id: number;
                                };
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                weak: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                            reserved: number[][];
                            nested: {
                                CType: {
                                    values: {
                                        STRING: number;
                                        CORD: number;
                                        STRING_PIECE: number;
                                    };
                                };
                                JSType: {
                                    values: {
                                        JS_NORMAL: number;
                                        JS_STRING: number;
                                        JS_NUMBER: number;
                                    };
                                };
                            };
                        };
                        OneofOptions: {
                            fields: {
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                        };
                        EnumOptions: {
                            fields: {
                                allowAlias: {
                                    type: string;
                                    id: number;
                                };
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                        };
                        EnumValueOptions: {
                            fields: {
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                        };
                        ServiceOptions: {
                            fields: {
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                        };
                        MethodOptions: {
                            fields: {
                                deprecated: {
                                    type: string;
                                    id: number;
                                };
                                uninterpretedOption: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            extensions: number[][];
                        };
                        UninterpretedOption: {
                            fields: {
                                name: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                                identifierValue: {
                                    type: string;
                                    id: number;
                                };
                                positiveIntValue: {
                                    type: string;
                                    id: number;
                                };
                                negativeIntValue: {
                                    type: string;
                                    id: number;
                                };
                                doubleValue: {
                                    type: string;
                                    id: number;
                                };
                                stringValue: {
                                    type: string;
                                    id: number;
                                };
                                aggregateValue: {
                                    type: string;
                                    id: number;
                                };
                            };
                            nested: {
                                NamePart: {
                                    fields: {
                                        namePart: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        isExtension: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                            };
                        };
                        SourceCodeInfo: {
                            fields: {
                                location: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            nested: {
                                Location: {
                                    fields: {
                                        path: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        span: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        leadingComments: {
                                            type: string;
                                            id: number;
                                        };
                                        trailingComments: {
                                            type: string;
                                            id: number;
                                        };
                                        leadingDetachedComments: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                            };
                        };
                        GeneratedCodeInfo: {
                            fields: {
                                annotation: {
                                    rule: string;
                                    type: string;
                                    id: number;
                                };
                            };
                            nested: {
                                Annotation: {
                                    fields: {
                                        path: {
                                            rule: string;
                                            type: string;
                                            id: number;
                                        };
                                        sourceFile: {
                                            type: string;
                                            id: number;
                                        };
                                        begin: {
                                            type: string;
                                            id: number;
                                        };
                                        end: {
                                            type: string;
                                            id: number;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export default _default;
