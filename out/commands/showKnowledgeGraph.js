"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.showKnowledgeGraphCommand = showKnowledgeGraphCommand;
const vscode = __importStar(require("vscode"));
const path = __importStar(require("path"));
const d3Visualization_1 = require("../webview/d3Visualization");
const KnowledgeGraphVectorizer_1 = require("../vectorization/KnowledgeGraphVectorizer");
/**
 * ‰ªéÂêëÈáèÊï∞ÊçÆÂ∫ìÈáçÂª∫Áü•ËØÜÂõæË∞±Áî®‰∫éÂèØËßÜÂåñ
 */
async function buildKnowledgeGraphFromVectorDB(workspacePath) {
    try {
        const config = vscode.workspace.getConfiguration('graphrag');
        const embeddingConfig = {
            apiUrl: config.get('embeddingApiUrl', 'http://10.30.235.27:46600'),
            model: config.get('embeddingModel', 'Qwen3-Embedding-8B')
        };
        const vectorizer = new KnowledgeGraphVectorizer_1.KnowledgeGraphVectorizer(workspacePath, embeddingConfig);
        // Ê£ÄÊü•ÊòØÂê¶ÊúâÂêëÈáèÊï∞ÊçÆ
        const hasVectorData = await vectorizer.hasKnowledgeGraph();
        if (!hasVectorData) {
            await vectorizer.close();
            return null;
        }
        // ‰ªéÂêëÈáèÊï∞ÊçÆÂ∫ì‰∏≠Ê£ÄÁ¥¢ÊâÄÊúâÊñáÊ°£Âπ∂ÈáçÂª∫Áü•ËØÜÂõæË∞±
        const collectionInfo = await vectorizer.getCollectionInfo('knowledge_graph');
        if (!collectionInfo) {
            await vectorizer.close();
            return null;
        }
        // Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØ
        const stats = await vectorizer.getVectorDBStats();
        // Ëé∑ÂèñÊâÄÊúâÂêëÈáèÊñáÊ°£
        const sqliteDB = vectorizer.vectorDB; // Ëé∑ÂèñÁßÅÊúâÂ±ûÊÄßÁî®‰∫éÊü•ËØ¢
        await sqliteDB.initialize();
        // Êü•ËØ¢ÊâÄÊúâÊñáÊ°£
        const documents = await new Promise((resolve, reject) => {
            sqliteDB.db.all("SELECT id, vector, content, metadata FROM vector_documents WHERE collection_name = ?", ['knowledge_graph'], (err, rows) => {
                if (err)
                    reject(err);
                else
                    resolve(rows);
            });
        });
        await vectorizer.close();
        // ÈáçÂª∫ËäÇÁÇπ
        const nodes = [];
        const nodeIdSet = new Set();
        const nodeMap = new Map();
        // Â§ÑÁêÜÊØè‰∏™ÊñáÊ°£
        for (const doc of documents) {
            try {
                const metadata = JSON.parse(doc.metadata);
                const vector = JSON.parse(doc.vector);
                // ÂàõÂª∫ËäÇÁÇπ
                const node = {
                    id: doc.id,
                    name: metadata.nodeId || doc.id,
                    type: 'entity', // ÈªòËÆ§Á±ªÂûã
                    properties: metadata
                };
                // Ê†πÊçÆÂÖÉÊï∞ÊçÆËÆæÁΩÆËäÇÁÇπÁ±ªÂûãÂíåÂ±ûÊÄß
                if (metadata.elementType) {
                    node.type = 'entity';
                    node.element_type = metadata.elementType;
                }
                else if (metadata.fileName) {
                    node.type = 'file';
                    node.path = metadata.filePath;
                }
                // ËÆæÁΩÆË∑ØÂæÑÂ±ûÊÄßÔºàÁî®‰∫é‰ª£Á†ÅË∑≥ËΩ¨Ôºâ
                if (metadata.filePath) {
                    node.path = metadata.filePath;
                }
                // Ê∑ªÂä†Ë°åÂè∑‰ø°ÊÅØÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
                if (metadata.startLine !== undefined) {
                    node.properties.start_line = metadata.startLine;
                }
                if (metadata.endLine !== undefined) {
                    node.properties.end_line = metadata.endLine;
                }
                nodes.push(node);
                nodeIdSet.add(doc.id);
                nodeMap.set(doc.id, node);
            }
            catch (parseError) {
                console.warn('Ëß£ÊûêÊñáÊ°£ÂÖÉÊï∞ÊçÆÂ§±Ë¥•:', doc.id, parseError);
            }
        }
        // ‰∏∫ÂèØËßÜÂåñÂàõÂª∫ÁÆÄÂåñÁöÑÂÖ≥Á≥ªÔºàÂü∫‰∫éËäÇÁÇπÁ±ªÂûãÂíåÊñá‰ª∂Ë∑ØÂæÑÔºâ
        const edges = [];
        const fileNodes = nodes.filter(n => n.type === 'file');
        const entityNodes = nodes.filter(n => n.type === 'entity');
        // ÂàõÂª∫Êñá‰ª∂Âà∞ÂÆû‰ΩìÁöÑÂÖ≥Á≥ª
        for (const entity of entityNodes) {
            if (entity.path) {
                const fileNode = fileNodes.find(f => f.path === entity.path);
                if (fileNode) {
                    edges.push({
                        id: `edge_${entity.id}_${fileNode.id}`,
                        source: fileNode.id,
                        target: entity.id,
                        relation: 'CONTAINS',
                        weight: 1.0,
                        properties: {}
                    });
                }
            }
        }
        // ÂàõÂª∫Áõ∏ÂêåÊñá‰ª∂‰∏≠ÂÆû‰Ωì‰πãÈó¥ÁöÑÂÖ≥Á≥ª
        const entitiesByFile = new Map();
        for (const entity of entityNodes) {
            if (entity.path) {
                if (!entitiesByFile.has(entity.path)) {
                    entitiesByFile.set(entity.path, []);
                }
                entitiesByFile.get(entity.path).push(entity);
            }
        }
        // ‰∏∫Âêå‰∏ÄÊñá‰ª∂‰∏≠ÁöÑÂÆû‰ΩìÂàõÂª∫ÂÖ≥Á≥ª
        for (const [filePath, entities] of entitiesByFile.entries()) {
            for (let i = 0; i < entities.length - 1; i++) {
                for (let j = i + 1; j < entities.length; j++) {
                    edges.push({
                        id: `edge_${entities[i].id}_${entities[j].id}`,
                        source: entities[i].id,
                        target: entities[j].id,
                        relation: 'RELATED_TO',
                        weight: 0.5,
                        properties: {
                            same_file: true
                        }
                    });
                }
            }
        }
        // ÊûÑÂª∫ÁÆÄÂåñÁöÑÁü•ËØÜÂõæË∞±ÁªìÊûÑÁî®‰∫éÂèØËßÜÂåñ
        const knowledgeGraph = {
            nodes: nodes,
            edges: edges,
            communities: [
                {
                    id: 'vector_community',
                    nodes: Array.from(nodeIdSet),
                    score: 1.0,
                    description: 'ÂêëÈáèÊï∞ÊçÆÂ∫ìÁ§æÂå∫',
                    tags: ['vector', 'database', 'sqlite']
                }
            ],
            metadata: {
                version: '1.0.0',
                created_at: collectionInfo?.created_at || new Date().toISOString(),
                total_files: fileNodes.length,
                total_entities: entityNodes.length,
                total_relationships: edges.length,
                workspace_path: workspacePath
            }
        };
        return knowledgeGraph;
    }
    catch (error) {
        console.error('‰ªéÂêëÈáèÊï∞ÊçÆÂ∫ìÈáçÂª∫Áü•ËØÜÂõæË∞±Â§±Ë¥•:', error);
        return null;
    }
}
/**
 * Â§ÑÁêÜË∑≥ËΩ¨Âà∞‰ª£Á†ÅÁöÑÊ∂àÊÅØ
 */
async function handleNavigateToCode(data, workspacePath) {
    console.log('üöÄ ÂºÄÂßãÂ§ÑÁêÜ‰ª£Á†ÅË∑≥ËΩ¨:', data);
    try {
        let filePath;
        let startLine;
        let endLine;
        if (data.type === 'entity' && data.properties) {
            // ‰ª£Á†ÅÂÆû‰ΩìËäÇÁÇπ
            filePath = data.properties.file_path || data.path;
            startLine = data.properties.start_line;
            endLine = data.properties.end_line;
            console.log('üìù ‰ª£Á†ÅÂÆû‰ΩìËäÇÁÇπ:', { filePath, startLine, endLine });
        }
        else if (data.type === 'file') {
            // Êñá‰ª∂ËäÇÁÇπ
            filePath = data.path;
            console.log('üìÅ Êñá‰ª∂ËäÇÁÇπ:', { filePath });
        }
        else {
            console.log('‚ö†Ô∏è ‰∏çÊîØÊåÅÁöÑËäÇÁÇπÁ±ªÂûã:', data.type);
            vscode.window.showWarningMessage('ËØ•ËäÇÁÇπ‰∏çÊîØÊåÅË∑≥ËΩ¨Âà∞‰ª£Á†Å');
            return;
        }
        if (!filePath) {
            console.log('‚ùå Ê≤°ÊúâÊâæÂà∞Êñá‰ª∂Ë∑ØÂæÑ');
            vscode.window.showWarningMessage('Êâæ‰∏çÂà∞Êñá‰ª∂Ë∑ØÂæÑ');
            return;
        }
        // Â¶ÇÊûúÊòØÁõ∏ÂØπË∑ØÂæÑÔºåËΩ¨Êç¢‰∏∫ÁªùÂØπË∑ØÂæÑ
        if (!path.isAbsolute(filePath)) {
            filePath = path.join(workspacePath, filePath);
        }
        console.log('üîç ÂáÜÂ§áÊâìÂºÄÊñá‰ª∂:', filePath);
        // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
        const uri = vscode.Uri.file(filePath);
        try {
            await vscode.workspace.fs.stat(uri);
            console.log('‚úÖ Êñá‰ª∂Â≠òÂú®ÔºåÁªßÁª≠ÊâìÂºÄ');
        }
        catch (error) {
            console.log('‚ùå Êñá‰ª∂‰∏çÂ≠òÂú®:', filePath);
            vscode.window.showErrorMessage(`Êñá‰ª∂‰∏çÂ≠òÂú®: ${filePath}`);
            return;
        }
        // ÊâìÂºÄÊñá‰ª∂
        console.log('üìÑ Ê≠£Âú®ÊâìÂºÄÊñá‰ª∂...');
        const document = await vscode.workspace.openTextDocument(uri);
        const editor = await vscode.window.showTextDocument(document);
        // Â¶ÇÊûúÊúâË°åÂè∑‰ø°ÊÅØÔºåË∑≥ËΩ¨Âπ∂ÈÄâ‰∏≠ÂØπÂ∫î‰ª£Á†ÅËåÉÂõ¥
        if (typeof startLine === 'number' && typeof endLine === 'number') {
            console.log(`üéØ Ë∑≥ËΩ¨Âà∞Ë°åÂè∑: ${startLine}-${endLine}`);
            const startPos = new vscode.Position(Math.max(0, startLine - 1), 0);
            const endPos = new vscode.Position(Math.max(0, endLine - 1), Number.MAX_SAFE_INTEGER);
            const range = new vscode.Range(startPos, endPos);
            // ÈÄâ‰∏≠ËåÉÂõ¥
            editor.selection = new vscode.Selection(range.start, range.end);
            // Ë∑≥ËΩ¨Âà∞ËØ•ËåÉÂõ¥
            editor.revealRange(range, vscode.TextEditorRevealType.InCenter);
            vscode.window.showInformationMessage(`Ë∑≥ËΩ¨Âà∞ ${path.basename(filePath)} Á¨¨ ${startLine}-${endLine} Ë°å`);
            console.log('‚úÖ ÊàêÂäüË∑≥ËΩ¨Âà∞ÊåáÂÆöË°åÂè∑');
        }
        else {
            // Âè™ÊâìÂºÄÊñá‰ª∂Ôºå‰∏çÂÅöÈÄâ‰∏≠
            vscode.window.showInformationMessage(`ÊâìÂºÄÊñá‰ª∂: ${path.basename(filePath)}`);
            console.log('‚úÖ ÊàêÂäüÊâìÂºÄÊñá‰ª∂');
        }
    }
    catch (error) {
        console.error('Ë∑≥ËΩ¨Âà∞‰ª£Á†ÅÂ§±Ë¥•:', error);
        vscode.window.showErrorMessage(`Ë∑≥ËΩ¨Â§±Ë¥•: ${error}`);
    }
}
/**
 * ÊòæÁ§∫Áü•ËØÜÂõæË∞±ÂëΩ‰ª§Â§ÑÁêÜÂô®
 */
async function showKnowledgeGraphCommand() {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        vscode.window.showErrorMessage('ËØ∑ÂÖàÊâìÂºÄ‰∏Ä‰∏™Â∑•‰ΩúÂå∫');
        return;
    }
    const workspacePath = workspaceFolders[0].uri.fsPath;
    try {
        // ÂÖàÂ∞ùËØï‰ªéÂêëÈáèÊï∞ÊçÆÂ∫ìÈáçÂª∫Áü•ËØÜÂõæË∞±
        let kg = await buildKnowledgeGraphFromVectorDB(workspacePath);
        if (!kg) {
            const result = await vscode.window.showWarningMessage('Ê≤°ÊúâÊâæÂà∞ÂêëÈáèÊï∞ÊçÆÂ∫ìÊï∞ÊçÆÔºåÊòØÂê¶Ë¶ÅÂÖàÊûÑÂª∫Áü•ËØÜÂõæË∞±Ôºü', 'ÊûÑÂª∫Áü•ËØÜÂõæË∞±', 'ÂèñÊ∂à');
            if (result === 'ÊûÑÂª∫Áü•ËØÜÂõæË∞±') {
                const { buildKnowledgeGraphCommand } = await import('./buildKnowledgeGraph.js');
                await buildKnowledgeGraphCommand();
                // ÈáçÊñ∞Â∞ùËØïÂä†ËΩΩ
                kg = await buildKnowledgeGraphFromVectorDB(workspacePath);
            }
            if (!kg) {
                return; // ‰ªçÁÑ∂Ê≤°ÊúâÊï∞ÊçÆÔºåÈÄÄÂá∫
            }
        }
        // ÂàõÂª∫Âπ∂ÊòæÁ§∫ WebView
        const panel = vscode.window.createWebviewPanel('knowledgeGraph', 'Áü•ËØÜÂõæË∞±ÂèØËßÜÂåñ', vscode.ViewColumn.One, {
            enableScripts: true,
            retainContextWhenHidden: true
        });
        // Â§ÑÁêÜÊù•Ëá™WebViewÁöÑÊ∂àÊÅØ
        panel.webview.onDidReceiveMessage(async (message) => {
            console.log('üîî Êî∂Âà∞WebViewÊ∂àÊÅØ:', message);
            switch (message.command) {
                case 'navigateToCode':
                    console.log('üìç Â§ÑÁêÜË∑≥ËΩ¨ËØ∑Ê±Ç:', message.data);
                    await handleNavigateToCode(message.data, workspacePath);
                    break;
                default:
                    console.log('‚ùì Êú™Áü•ÂëΩ‰ª§:', message.command);
                    break;
            }
        }, undefined);
        panel.webview.html = (0, d3Visualization_1.generateD3WebviewContent)(kg);
    }
    catch (error) {
        vscode.window.showErrorMessage(`Êó†Ê≥ïÂä†ËΩΩÁü•ËØÜÂõæË∞±: ${error}`);
    }
}
//# sourceMappingURL=showKnowledgeGraph.js.map