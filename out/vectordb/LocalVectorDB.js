"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalVectorDB = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const vscode = __importStar(require("vscode"));
/**
 * Êú¨Âú∞ÂêëÈáèÊï∞ÊçÆÂ∫ìÁ±ª
 * ÊîØÊåÅÊåâÈ°πÁõÆÁÆ°ÁêÜÂêëÈáèÊï∞ÊçÆÔºåÊØè‰∏™È°πÁõÆÊúâÁã¨Á´ãÁöÑÂêëÈáèÊï∞ÊçÆÂ∫ìÊñá‰ª∂
 */
class LocalVectorDB {
    data;
    dbFilePath;
    projectName;
    constructor(projectPath) {
        this.projectName = this.getProjectName(projectPath);
        this.dbFilePath = this.getDBFilePath(projectPath);
        this.data = this.loadDatabase();
    }
    /**
     * Ëé∑ÂèñÈ°πÁõÆÂêçÁß∞
     */
    getProjectName(projectPath) {
        return path.basename(projectPath);
    }
    /**
     * Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÊñá‰ª∂Ë∑ØÂæÑ
     */
    getDBFilePath(projectPath) {
        const huimaDir = path.join(projectPath, '.huima');
        if (!fs.existsSync(huimaDir)) {
            fs.mkdirSync(huimaDir, { recursive: true });
        }
        return path.join(huimaDir, 'vector-database.json');
    }
    /**
     * Âä†ËΩΩÊï∞ÊçÆÂ∫ì
     */
    loadDatabase() {
        try {
            if (fs.existsSync(this.dbFilePath)) {
                const data = fs.readFileSync(this.dbFilePath, 'utf8');
                const parsed = JSON.parse(data);
                // ÁâàÊú¨ÂÖºÂÆπÊÄßÊ£ÄÊü•
                if (!parsed.version) {
                    parsed.version = '1.0.0';
                }
                return parsed;
            }
        }
        catch (error) {
            console.warn(`ÂêëÈáèÊï∞ÊçÆÂ∫ìÂä†ËΩΩÂ§±Ë¥•ÔºåÂàõÂª∫Êñ∞Êï∞ÊçÆÂ∫ì: ${error}`);
            vscode.window.showWarningMessage(`ÂêëÈáèÊï∞ÊçÆÂ∫ìÂä†ËΩΩÂ§±Ë¥•ÔºåÂ∞ÜÂàõÂª∫Êñ∞Êï∞ÊçÆÂ∫ì`);
        }
        return {
            collections: {},
            version: '1.0.0'
        };
    }
    /**
     * ‰øùÂ≠òÊï∞ÊçÆÂ∫ì
     */
    saveDatabase() {
        try {
            const dataToSave = {
                ...this.data,
                version: '1.0.0'
            };
            fs.writeFileSync(this.dbFilePath, JSON.stringify(dataToSave, null, 2), 'utf8');
            console.log(`‚úÖ ÂêëÈáèÊï∞ÊçÆÂ∫ìÂ∑≤‰øùÂ≠ò: ${this.dbFilePath}`);
        }
        catch (error) {
            console.error('‚ùå ‰øùÂ≠òÂêëÈáèÊï∞ÊçÆÂ∫ìÂ§±Ë¥•:', error);
            vscode.window.showErrorMessage(`‰øùÂ≠òÂêëÈáèÊï∞ÊçÆÂ∫ìÂ§±Ë¥•: ${error}`);
            throw error;
        }
    }
    /**
     * ÂàõÂª∫ÈõÜÂêà
     * @param collectionName ÈõÜÂêàÂêçÁß∞
     * @param dimension ÂêëÈáèÁª¥Â∫¶
     */
    createCollection(collectionName, dimension) {
        if (!this.data.collections[collectionName]) {
            this.data.collections[collectionName] = {
                dimension: dimension,
                documents: [],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            console.log(`‚úÖ ÈõÜÂêà "${collectionName}" ÂàõÂª∫ÊàêÂäüÔºåÁª¥Â∫¶: ${dimension}`);
        }
        else {
            console.log(`‚ö†Ô∏è ÈõÜÂêà "${collectionName}" Â∑≤Â≠òÂú®`);
        }
        this.saveDatabase();
    }
    /**
     * ÊèíÂÖ•ÂêëÈáèÊñáÊ°£
     * @param collectionName ÈõÜÂêàÂêçÁß∞
     * @param documents ÊñáÊ°£Êï∞ÁªÑ
     */
    insert(collectionName, documents) {
        if (!this.data.collections[collectionName]) {
            throw new Error(`ÈõÜÂêà "${collectionName}" ‰∏çÂ≠òÂú®`);
        }
        const collection = this.data.collections[collectionName];
        documents.forEach(doc => {
            // È™åËØÅÂêëÈáèÁª¥Â∫¶
            if (doc.vector.length !== collection.dimension) {
                throw new Error(`ÊñáÊ°£ÂêëÈáèÁª¥Â∫¶‰∏çÂåπÈÖçÔºåÊúüÊúõ: ${collection.dimension}, ÂÆûÈôÖ: ${doc.vector.length}`);
            }
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåIDÁöÑÊñáÊ°£
            const existingIndex = collection.documents.findIndex(d => d.id === doc.id);
            if (existingIndex !== -1) {
                // Êõ¥Êñ∞Áé∞ÊúâÊñáÊ°£
                collection.documents[existingIndex] = {
                    ...doc,
                    metadata: {
                        ...doc.metadata,
                        updatedAt: new Date().toISOString()
                    }
                };
                console.log(`üîÑ Êõ¥Êñ∞ÊñáÊ°£: ${doc.id}`);
            }
            else {
                // Ê∑ªÂä†Êñ∞ÊñáÊ°£
                collection.documents.push({
                    ...doc,
                    metadata: {
                        ...doc.metadata,
                        createdAt: new Date().toISOString(),
                        projectName: this.projectName
                    }
                });
                console.log(`‚ûï Êñ∞Â¢ûÊñáÊ°£: ${doc.id}`);
            }
        });
        // Êõ¥Êñ∞ÈõÜÂêàÁöÑÊúÄÂêé‰øÆÊîπÊó∂Èó¥
        collection.updatedAt = new Date().toISOString();
        console.log(`‚úÖ ÊàêÂäüÂ§ÑÁêÜ ${documents.length} ‰∏™ÊñáÊ°£Âà∞ÈõÜÂêà "${collectionName}"`);
        this.saveDatabase();
    }
    /**
     * ÊêúÁ¥¢Áõ∏‰ººÂêëÈáè
     * @param collectionName ÈõÜÂêàÂêçÁß∞
     * @param queryVector Êü•ËØ¢ÂêëÈáè
     * @param options ÊêúÁ¥¢ÈÄâÈ°π
     */
    search(collectionName, queryVector, options = {}) {
        const { topK = 5, threshold = 0 } = options;
        if (!this.data.collections[collectionName]) {
            throw new Error(`ÈõÜÂêà "${collectionName}" ‰∏çÂ≠òÂú®`);
        }
        const collection = this.data.collections[collectionName];
        if (queryVector.length !== collection.dimension) {
            throw new Error(`Êü•ËØ¢ÂêëÈáèÁª¥Â∫¶‰∏çÂåπÈÖçÔºåÊúüÊúõ: ${collection.dimension}, ÂÆûÈôÖ: ${queryVector.length}`);
        }
        // ËÆ°ÁÆóÁõ∏‰ººÂ∫¶
        const results = collection.documents.map(doc => {
            const similarity = this.cosineSimilarity(queryVector, doc.vector);
            return {
                document: doc,
                score: similarity
            };
        });
        // ËøáÊª§‰Ωé‰∫éÈòàÂÄºÁöÑÁªìÊûúÔºåÊåâÁõ∏‰ººÂ∫¶ÊéíÂ∫èÔºåËøîÂõûÂâçK‰∏™ÁªìÊûú
        return results
            .filter(result => result.score >= threshold)
            .sort((a, b) => b.score - a.score)
            .slice(0, topK);
    }
    /**
     * ËÆ°ÁÆó‰ΩôÂº¶Áõ∏‰ººÂ∫¶
     */
    cosineSimilarity(vecA, vecB) {
        if (vecA.length !== vecB.length) {
            throw new Error('ÂêëÈáèÁª¥Â∫¶‰∏çÂåπÈÖç');
        }
        let dotProduct = 0;
        let magnitudeA = 0;
        let magnitudeB = 0;
        for (let i = 0; i < vecA.length; i++) {
            dotProduct += vecA[i] * vecB[i];
            magnitudeA += vecA[i] * vecA[i];
            magnitudeB += vecB[i] * vecB[i];
        }
        magnitudeA = Math.sqrt(magnitudeA);
        magnitudeB = Math.sqrt(magnitudeB);
        if (magnitudeA === 0 || magnitudeB === 0) {
            return 0;
        }
        return dotProduct / (magnitudeA * magnitudeB);
    }
    /**
     * Ëé∑ÂèñÈõÜÂêà‰ø°ÊÅØ
     */
    getCollectionInfo(collectionName) {
        return this.data.collections[collectionName] || null;
    }
    /**
     * Ëé∑ÂèñÊâÄÊúâÈõÜÂêàÂêçÁß∞
     */
    getCollectionNames() {
        return Object.keys(this.data.collections);
    }
    /**
     * Âà†Èô§ÈõÜÂêà
     */
    dropCollection(collectionName) {
        if (this.data.collections[collectionName]) {
            delete this.data.collections[collectionName];
            console.log(`üóëÔ∏è Âà†Èô§ÈõÜÂêà: ${collectionName}`);
            this.saveDatabase();
        }
        else {
            console.warn(`‚ö†Ô∏è ÈõÜÂêà "${collectionName}" ‰∏çÂ≠òÂú®`);
        }
    }
    /**
     * Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÁªüËÆ°‰ø°ÊÅØ
     */
    getStats() {
        const collections = {};
        let totalDocuments = 0;
        Object.entries(this.data.collections).forEach(([name, collection]) => {
            collections[name] = {
                documents: collection.documents.length,
                dimension: collection.dimension
            };
            totalDocuments += collection.documents.length;
        });
        return {
            totalCollections: Object.keys(this.data.collections).length,
            totalDocuments,
            collections
        };
    }
}
exports.LocalVectorDB = LocalVectorDB;
//# sourceMappingURL=LocalVectorDB.js.map